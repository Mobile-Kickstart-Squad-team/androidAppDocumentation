{"version":3,"sources":["logo.svg","pages/navbar.jsx","pages/index.jsx","pages/404.jsx","pages/document.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","class","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","aria-haspopup","aria-labelledby","MainPage","NotFoundPage","DocumentPage","App","exact","path","component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAAAA,EAAOC,QAAU,IAA0B,kC,6KCsC5BC,EAnCA,WACX,OACI,yBAAKC,MAAM,yDACP,uBAAGA,MAAM,eAAeC,KAAK,IAA7B,mCACA,4BAAQD,MAAM,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,yBAAyBC,gBAAc,wBAAwBC,gBAAc,QAAQC,aAAW,qBAC5K,0BAAMP,MAAM,yBAGhB,yBAAKA,MAAM,2BAA2BQ,GAAG,yBACrC,wBAAIR,MAAM,sBACN,wBAAIA,MAAM,mBACN,uBAAGA,MAAM,YAAY,kBAAC,IAAD,CAAMS,GAAG,KAAT,QAArB,IAA8C,0BAAMT,MAAM,WAAZ,eAElD,wBAAIA,MAAM,YACN,uBAAGA,MAAM,YAAY,kBAAC,IAAD,CAAMS,GAAG,aAAT,cAEzB,wBAAIT,MAAM,YACN,uBAAGA,MAAM,oBAAoBC,KAAK,KAAlC,UAEJ,wBAAID,MAAM,qBACN,uBAAGA,MAAM,2BAA2BC,KAAK,IAAIO,GAAG,aAAaL,cAAY,WAAWO,gBAAc,OAAOJ,gBAAc,SAAvH,SAEA,yBAAKN,MAAM,gBAAgBW,kBAAgB,cACvC,uBAAGX,MAAM,gBAAgBC,KAAK,KAA9B,MAAqC,kBAAC,IAAD,CAAMQ,GAAG,UAAT,UACrC,uBAAGT,MAAM,gBAAgBC,KAAK,KAA9B,kBACA,uBAAGD,MAAM,gBAAgBC,KAAK,KAA9B,6BCRbW,EAdE,WAEb,OACI,6BACI,kBAAC,EAAD,MAEA,yBAAKZ,MAAM,cAAX,2CCGGa,EAXM,WAEjB,OAEI,6BACI,+CCkBGC,EAtBK,WAEhB,OAEI,6BACI,kBAAC,EAAD,MAEA,yBAAKd,MAAM,cACX,6CAEA,4BAEI,0CACA,0CACA,8CCQDe,E,iLAbX,OAAO,kBAAC,IAAD,KACH,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,YAAYC,UAAWJ,IACzC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,OAAMC,UAAWL,IACnC,kBAAC,IAAD,CAAUJ,GAAG,e,GARHU,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bb166173.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n    return (\n        <nav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n            <a class=\"navbar-brand\" href=\"\">Welcome to Kickstar Android App</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n                <ul class=\"navbar-nav mr-auto\">\n                    <li class=\"nav-item active\">\n                        <a class=\"nav-link\" ><Link to=\"/\">Home</Link> <span class=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" ><Link to=\"/document\">Document</Link></a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link disabled\" href=\"#\">Links</a>\n                    </li>\n                    <li class=\"nav-item dropdown\">\n                        <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Links</a>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\">\n                            <a class=\"dropdown-item\" href=\"#\">   <Link to=\"/link1\">Link1</Link></a>\n                            <a class=\"dropdown-item\" href=\"#\">Another action</a>\n                            <a class=\"dropdown-item\" href=\"#\">Something else here</a>\n                        </div>\n                    </li>\n                </ul>\n\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from 'react';\n\nimport { Link }from 'react-router-dom';\nimport Navbar from './navbar';\n\n\nconst MainPage = () => {\n\n    return (\n        <div>\n            <Navbar />\n        \n            <div class=\"App-header\">\n\n                Welcome to Mobile Kickstar Squad App! \n            </div>\n        </div>\n    )\n}\n\nexport default MainPage;","import React from 'react';\n\n\n\nconst NotFoundPage = () => {\n\n    return (\n        \n        <div>\n            <h3>404 Not Found</h3>\n        </div>\n\n    )\n}\n\nexport default NotFoundPage;","\nimport React from 'react';\nimport Navbar from './navbar';\n\n\nconst DocumentPage= () => {\n\n    return (\n        \n        <div>\n            <Navbar />\n\n            <div class=\"App-header\">\n            <h3>Document Page</h3>\n\n            <ul>\n\n                <li>docoment 1</li>\n                <li>docoment 2</li>\n                <li>docoment 3</li>\n            </ul>\n            </div>\n        </div>\n\n    )\n}\n\nexport default DocumentPage;\n ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { BrowserRouter as Router, Route, Switch , Link, Redirect } from 'react-router-dom';\n\nimport MainPage from './pages'\nimport NotFoundPage from './pages/404';\nimport DocumentPage from './pages/document'\n\n\nclass App extends React.Component {\n  render(){\n    \n    return <Router>\n        <Switch>\n        <Route exact path=\"/\" component={MainPage} />\n        <Route exact path=\"/document\" component={DocumentPage} />\n        <Route exact path=\"/404\"component={NotFoundPage} />\n        <Redirect to=\"/404\"/>\n        </Switch>\n      </Router>\n      \n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}